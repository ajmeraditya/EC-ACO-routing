class Node:
    def __init__(self, node_id, x, y, energy, n, max_num_ants):
        self.node_id = node_id                      # ID of the node
        self.location = (x,y)                       # (x,y) location of the node
        self.energy = energy                        # Energy of the node
        self.neighbors = []                         # List of neighbors (node ids)
        self.num_neighbors = 0                      # Number of neighbors
        self.pheromone_matrix = np.zeros((n, n))    # Pheromone matrix (n x n)
        self.loss_matrix = np.zeros((n, n))         # Loss percentage matrix (n x n)
        self.max_num_ants = max_num_ants            # Max number of ants to be produced
        self.generated_ants_count = 0               # Number of ants generated
        self.ants = []                              # List of ants currently at this node


class Ant:
    def __init__(self, ant_id, source_node, sink_node, pheromone_matrix):
        self.ant_id = ant_id                        # Unique ID of the ant
        self.source_node = source_node              # Source node of the ant
        self.sink_node = sink_node                  # Destination node (sink)
        self.visited_nodes = [source_node]          # List of nodes visited, starting from the source
        self.current_position = source_node         # Current position (initially at source)
        self.distance_traveled = 0.0                # Total distance traveled
        self.curr_back_index=-1                     # Used in back ant how much path retraced
        self.is_back_ant = False                    # Indicates if the ant is retracing its path (True if retracing)
        self.pheromone_matrix = [row[:] for row in pheromone_matrix]  # Copy of the source node's pheromone matrix